plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}

import java.util.Properties

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
}

android {

    buildFeatures {
        compose true
    }
    compileSdkVersion 35
    buildToolsVersion "30.0.3"

    namespace "com.example.explorelens"



    defaultConfig {
        applicationId "com.example.explorelens"
        minSdkVersion 24
        targetSdkVersion 35
        versionCode 1
        versionName "1.0"

        buildConfigField("String", "BASE_URL", "\"${localProperties.getProperty('BASE_URL', 'http://192.168.1.141:3000')}\"")
        buildConfigField("String", "WEB_CLIENT_ID", "\"${localProperties.getProperty('WEB_CLIENT_ID', 'NONE')}\"")
        buildConfigField("Boolean", "USE_MOCK_DATA", "${project.properties["USE_MOCK_DATA"] ?: "false"}")
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // Create a task to generate the network security config
            def generateNetworkSecurityConfig = task("generate${variant.name.capitalize()}NetworkSecurityConfig") {
                doLast {
                    def templateFile = file("${projectDir}/src/main/res/xml/network_security_config.xml")
                    def outputFile = file("${projectDir}/build/generated/res/xml/${variant.name}/network_security_config.xml")

                    outputFile.parentFile.mkdirs()

                    // Use BASE_URL from local.properties
                    def localProps = new Properties()
                    def localPropsFile = rootProject.file("local.properties")
                    if (localPropsFile.exists()) {
                        localProps.load(new FileInputStream(localPropsFile))
                    }
                    def baseUrl = localProps['BASE_URL'] ?: 'http://192.168.1.141:3000'

                    def templateContent = templateFile.text
                    def outputContent = templateContent.replace('$BASE_URL', baseUrl)

                    outputFile.text = outputContent
                }
            }

            // Hook into the build process
            variant.preBuildProvider.get().dependsOn(generateNetworkSecurityConfig)

            // Register the generated resource directory
            variant.registerGeneratedResFolders(
                    files("${projectDir}/build/generated/res/xml/${variant.name}").builtBy(generateNetworkSecurityConfig)
            )
        }
    }


    buildFeatures {
        viewBinding true
        buildConfig true
        compose true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility "17"
        targetCompatibility "17"
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/INDEX.LIST'
    }
}

android.sourceSets.main.java.srcDirs += ['../third_party']

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.8.20"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3"

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'

    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.cardview:cardview:1.0.0'


    // Google Cloud Vision APIs
    implementation platform('com.google.cloud:libraries-bom:19.2.1')
    implementation 'com.google.cloud:google-cloud-vision:1.102.0'
    implementation 'io.grpc:grpc-okhttp:1.36.0'

    // MLKit
    implementation 'com.google.mlkit:object-detection:16.2.3'
    implementation 'com.google.mlkit:object-detection-custom:16.3.1'

    // ARCore
    implementation 'com.google.ar:core:1.31.0'

    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.2'


    // Obj - a simple Wavefront OBJ file loader
    // https://github.com/javagl/Obj
    implementation 'de.javagl:obj:0.2.1'

    implementation "androidx.compose.compiler:compiler:1.4.6"
    implementation 'androidx.compose.ui:ui-graphics-android:1.7.8'
    implementation 'androidx.compose.material3:material3-android:1.3.1'
    implementation 'androidx.compose.runtime:runtime-android:1.7.8'
    implementation 'androidx.compose.foundation:foundation-android:1.7.8'

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'

    // Navigation Component
    implementation 'androidx.navigation:navigation-fragment-ktx:2.8.9'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'

    //google-sign in
    implementation 'com.google.android.gms:play-services-auth:20.5.0'

    //room
    implementation "androidx.room:room-ktx:2.6.1"
    implementation "androidx.room:room-runtime:2.6.1"
    implementation 'com.google.android.gms:play-services-maps:19.2.0'
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    kapt "androidx.room:room-compiler:2.6.1"

    implementation 'com.github.bumptech.glide:glide:4.16.0'
    kapt 'com.github.bumptech.glide:compiler:4.16.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    //EncryptedSharedPreferences
    implementation "androidx.security:security-crypto:1.1.0-alpha06"

    //geohash
    implementation 'ch.hsr:geohash:1.4.0'

    //PICASSO
    implementation 'com.squareup.picasso:picasso:2.8'

}
configurations.all {
    resolutionStrategy {
        force "androidx.compose.compiler:compiler:1.4.6"
    }
}